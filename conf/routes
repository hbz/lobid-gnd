# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Handle trailing slashes
GET     /reconcile/     controllers.Reconcile.main(callback ?= "", queries ?= "", extend ?= "")
POST    /reconcile/     controllers.Reconcile.reconcile()
GET     /*path/         controllers.HomeController.redirectSlash(path: String)

#OpenRefine reconciliation endpoint
GET     /reconcile            controllers.Reconcile.main(callback ?= "", queries ?= "", extend ?= "")
POST    /reconcile            controllers.Reconcile.reconcile()
GET     /reconcile/properties controllers.Reconcile.properties(callback ?= "", type ?= "", limit ?= "")
GET     /reconcile/suggest/:service   controllers.Reconcile.suggest(callback ?= "", service, prefix, type ?= "", type_strict ?= "", limit: Int ?= 10, start: Int ?= 0)
GET     /reconcile/flyout/:service    controllers.Reconcile.flyout(callback ?= "", service, id)

GET     /               controllers.HomeController.index

GET     /api            controllers.HomeController.api

GET     /context.jsonld controllers.HomeController.context()

GET     /dataset.jsonld controllers.HomeController.dataset(format="json")
GET     /dataset        controllers.HomeController.dataset(format?="")

GET     /search         controllers.HomeController.search(q ?= "", name ?= "", place ?= "", subject ?= "", publication ?= "", date ?= "", filter ?= "", sort ?= "", from: Int ?= 0, size: Int ?= 10, format ?= null)
GET     /advanced       controllers.HomeController.advanced()

GET     /cgi-bin/wwwalleg/:name.pl   controllers.HomeController.authorityPl(name, db ?= "rnam", index: Int ?= 1, zeilen: Int ?= 1, s1)

GET     /robots.txt     controllers.HomeController.robots()

GET     /:id.:format    controllers.HomeController.authorityDotFormat(id, format)

GET     /:id            controllers.HomeController.authority(id, format ?= null)

GET     /:id/dnb        controllers.HomeController.gnd(id)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file   controllers.Assets.versioned(path="/public", file: Asset)
